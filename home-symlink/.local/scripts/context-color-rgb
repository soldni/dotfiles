#!/usr/bin/env bash

CONTEXT="hostname; whoami"

QUANTIZE_SCRIPT=$(cat <<END
# python code starts here
import sys, random

value =int(sys.argv[1], 16)
qmin = float(sys.argv[2])
qmax = float(sys.argv[3])
channels = int(sys.argv[4])

random.seed(value)

rgb = []
for channel in range(1, channels + 1):
    percent = (value * random.random() % 100) * random.uniform(0.5, 1) / 100.
    # rgb.append(percent)
    scaled = (qmax - qmin) * percent + qmin
    rgb.append(int(scaled))

print(';'.join(map(str,rgb)))

# python code ends here
END
)

__rgb_to_hex() {
    IFS=';' read -a rgb <<< "${1}"
    printf "#%02x%02x%02x\n" ${rgb[@]}
}

context_color_rgb_nubers() {
    has_python3=$(which python3 2>/dev/null)
    if [[ ! -z $has_python3 ]]; then
        python_exec="$(which python3)"
    else
        python_exec="$(which python)"
    fi

    context="${LOCAL_CONTEXT_COLOR} $(eval "${CONTEXT}")"
    # echo $context
    fullhash=$(echo $context | sha256sum | awk '{ print $1 }')
    # echo $fullhash
    rgb="$(${python_exec} -c "$QUANTIZE_SCRIPT" ${fullhash} 150 255 3)"
    echo "${rgb}"
}

context_color_hex_nubers() {
    out=$(context_color_rgb_nubers)
    outhex=$(__rgb_to_hex $out)
    echo $outhex | tr -d '\n'
}


while getopts ":xr" opt; do
  case ${opt} in
    x ) context_color_hex_nubers
      ;;
    r ) context_color_rgb_nubers
      ;;
  esac
done
